// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "C:\Users\Wael\Projects\SchizoFS\Parser.fsy"

//
// Schizo F# Referemce Compiler
// Copyright (C) 2014-2015  Wael El Oraiby
// 
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
// 
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
open Ast
open System

# 28 "C:\Users\Wael\Projects\SchizoFS\Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | SC of (TokenData)
  | RIGHT_HASH of (TokenData)
  | LEFT_HASH of (TokenData)
  | RIGHT_PAREN of (TokenData)
  | LEFT_PAREN of (TokenData)
  | RIGHT_BRACK of (TokenData)
  | LEFT_BRACK of (TokenData)
  | RIGHT_BRACE of (TokenData)
  | LEFT_BRACE of (TokenData)
  | FALSE of (Node)
  | TRUE of (Node)
  | OPERATOR of (Node)
  | SYMBOL of (Node)
  | STRING of (Node)
  | REAL64 of (Node)
  | INT64 of (Node)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_SC
    | TOKEN_RIGHT_HASH
    | TOKEN_LEFT_HASH
    | TOKEN_RIGHT_PAREN
    | TOKEN_LEFT_PAREN
    | TOKEN_RIGHT_BRACK
    | TOKEN_LEFT_BRACK
    | TOKEN_RIGHT_BRACE
    | TOKEN_LEFT_BRACE
    | TOKEN_FALSE
    | TOKEN_TRUE
    | TOKEN_OPERATOR
    | TOKEN_SYMBOL
    | TOKEN_STRING
    | TOKEN_REAL64
    | TOKEN_INT64
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_prog
    | NONTERM_atom
    | NONTERM_exp
    | NONTERM_exp_member
    | NONTERM_exp_member_list
    | NONTERM_exp_list
    | NONTERM_paren_exp

// This function maps tokens to integers indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | SC _ -> 1 
  | RIGHT_HASH _ -> 2 
  | LEFT_HASH _ -> 3 
  | RIGHT_PAREN _ -> 4 
  | LEFT_PAREN _ -> 5 
  | RIGHT_BRACK _ -> 6 
  | LEFT_BRACK _ -> 7 
  | RIGHT_BRACE _ -> 8 
  | LEFT_BRACE _ -> 9 
  | FALSE _ -> 10 
  | TRUE _ -> 11 
  | OPERATOR _ -> 12 
  | SYMBOL _ -> 13 
  | STRING _ -> 14 
  | REAL64 _ -> 15 
  | INT64 _ -> 16 

// This function maps integers indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_SC 
  | 2 -> TOKEN_RIGHT_HASH 
  | 3 -> TOKEN_LEFT_HASH 
  | 4 -> TOKEN_RIGHT_PAREN 
  | 5 -> TOKEN_LEFT_PAREN 
  | 6 -> TOKEN_RIGHT_BRACK 
  | 7 -> TOKEN_LEFT_BRACK 
  | 8 -> TOKEN_RIGHT_BRACE 
  | 9 -> TOKEN_LEFT_BRACE 
  | 10 -> TOKEN_FALSE 
  | 11 -> TOKEN_TRUE 
  | 12 -> TOKEN_OPERATOR 
  | 13 -> TOKEN_SYMBOL 
  | 14 -> TOKEN_STRING 
  | 15 -> TOKEN_REAL64 
  | 16 -> TOKEN_INT64 
  | 19 -> TOKEN_end_of_input
  | 17 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_prog 
    | 3 -> NONTERM_prog 
    | 4 -> NONTERM_atom 
    | 5 -> NONTERM_atom 
    | 6 -> NONTERM_atom 
    | 7 -> NONTERM_atom 
    | 8 -> NONTERM_atom 
    | 9 -> NONTERM_atom 
    | 10 -> NONTERM_atom 
    | 11 -> NONTERM_exp 
    | 12 -> NONTERM_exp_member 
    | 13 -> NONTERM_exp_member 
    | 14 -> NONTERM_exp_member_list 
    | 15 -> NONTERM_exp_member_list 
    | 16 -> NONTERM_exp_list 
    | 17 -> NONTERM_exp_list 
    | 18 -> NONTERM_paren_exp 
    | 19 -> NONTERM_paren_exp 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 19 
let _fsyacc_tagOfErrorTerminal = 17

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | SC _ -> "SC" 
  | RIGHT_HASH _ -> "RIGHT_HASH" 
  | LEFT_HASH _ -> "LEFT_HASH" 
  | RIGHT_PAREN _ -> "RIGHT_PAREN" 
  | LEFT_PAREN _ -> "LEFT_PAREN" 
  | RIGHT_BRACK _ -> "RIGHT_BRACK" 
  | LEFT_BRACK _ -> "LEFT_BRACK" 
  | RIGHT_BRACE _ -> "RIGHT_BRACE" 
  | LEFT_BRACE _ -> "LEFT_BRACE" 
  | FALSE _ -> "FALSE" 
  | TRUE _ -> "TRUE" 
  | OPERATOR _ -> "OPERATOR" 
  | SYMBOL _ -> "SYMBOL" 
  | STRING _ -> "STRING" 
  | REAL64 _ -> "REAL64" 
  | INT64 _ -> "INT64" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | SC _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | RIGHT_HASH _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LEFT_HASH _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | RIGHT_PAREN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LEFT_PAREN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | RIGHT_BRACK _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LEFT_BRACK _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | RIGHT_BRACE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LEFT_BRACE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FALSE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | TRUE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | OPERATOR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | SYMBOL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | REAL64 _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT64 _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 1us; 65535us; 0us; 2us; 2us; 65535us; 16us; 13us; 18us; 13us; 3us; 65535us; 0us; 4us; 16us; 14us; 18us; 14us; 2us; 65535us; 16us; 17us; 18us; 15us; 1us; 65535us; 18us; 16us; 1us; 65535us; 18us; 19us; 3us; 65535us; 0us; 12us; 16us; 12us; 18us; 12us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 5us; 8us; 12us; 15us; 17us; 19us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 2us; 1us; 3us; 1us; 4us; 1us; 5us; 1us; 6us; 1us; 7us; 1us; 8us; 1us; 9us; 1us; 10us; 1us; 11us; 1us; 12us; 1us; 13us; 1us; 14us; 2us; 15us; 17us; 1us; 15us; 2us; 18us; 19us; 2us; 18us; 19us; 1us; 19us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 12us; 14us; 16us; 18us; 20us; 22us; 24us; 26us; 28us; 30us; 32us; 35us; 37us; 40us; 43us; |]
let _fsyacc_action_rows = 21
let _fsyacc_actionTableElements = [|2us; 32768us; 0us; 3us; 5us; 18us; 0us; 49152us; 0us; 16385us; 0us; 16386us; 0us; 16387us; 0us; 16388us; 0us; 16389us; 0us; 16390us; 0us; 16391us; 0us; 16392us; 0us; 16393us; 0us; 16394us; 0us; 16395us; 0us; 16396us; 0us; 16397us; 0us; 16398us; 8us; 16401us; 5us; 18us; 10us; 11us; 11us; 10us; 12us; 6us; 13us; 5us; 14us; 7us; 15us; 9us; 16us; 8us; 0us; 16399us; 8us; 16400us; 5us; 18us; 10us; 11us; 11us; 10us; 12us; 6us; 13us; 5us; 14us; 7us; 15us; 9us; 16us; 8us; 1us; 16402us; 4us; 20us; 0us; 16403us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 3us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 27us; 28us; 37us; 39us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 2us; 0us; 1us; 2us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 4us; 5us; 5us; 6us; 6us; 7us; 7us; 8us; 8us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 16385us; 16386us; 16387us; 16388us; 16389us; 16390us; 16391us; 16392us; 16393us; 16394us; 16395us; 16396us; 16397us; 16398us; 65535us; 16399us; 65535us; 65535us; 16403us; |]
let _fsyacc_reductions ()  =    [| 
# 206 "C:\Users\Wael\Projects\SchizoFS\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Node option)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 215 "C:\Users\Wael\Projects\SchizoFS\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'prog)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "C:\Users\Wael\Projects\SchizoFS\Parser.fsy"
                                                                   _1 
                   )
# 46 "C:\Users\Wael\Projects\SchizoFS\Parser.fsy"
                 : Node option));
# 226 "C:\Users\Wael\Projects\SchizoFS\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "C:\Users\Wael\Projects\SchizoFS\Parser.fsy"
                                                                   None 
                   )
# 49 "C:\Users\Wael\Projects\SchizoFS\Parser.fsy"
                 : 'prog));
# 236 "C:\Users\Wael\Projects\SchizoFS\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "C:\Users\Wael\Projects\SchizoFS\Parser.fsy"
                                                                   Some _1 
                   )
# 50 "C:\Users\Wael\Projects\SchizoFS\Parser.fsy"
                 : 'prog));
# 247 "C:\Users\Wael\Projects\SchizoFS\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Node)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "C:\Users\Wael\Projects\SchizoFS\Parser.fsy"
                                                                   _1 
                   )
# 53 "C:\Users\Wael\Projects\SchizoFS\Parser.fsy"
                 : 'atom));
# 258 "C:\Users\Wael\Projects\SchizoFS\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Node)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "C:\Users\Wael\Projects\SchizoFS\Parser.fsy"
                                                                   _1 
                   )
# 54 "C:\Users\Wael\Projects\SchizoFS\Parser.fsy"
                 : 'atom));
# 269 "C:\Users\Wael\Projects\SchizoFS\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Node)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "C:\Users\Wael\Projects\SchizoFS\Parser.fsy"
                                                                   _1 
                   )
# 55 "C:\Users\Wael\Projects\SchizoFS\Parser.fsy"
                 : 'atom));
# 280 "C:\Users\Wael\Projects\SchizoFS\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Node)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "C:\Users\Wael\Projects\SchizoFS\Parser.fsy"
                                                                   _1 
                   )
# 56 "C:\Users\Wael\Projects\SchizoFS\Parser.fsy"
                 : 'atom));
# 291 "C:\Users\Wael\Projects\SchizoFS\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Node)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "C:\Users\Wael\Projects\SchizoFS\Parser.fsy"
                                                                   _1 
                   )
# 57 "C:\Users\Wael\Projects\SchizoFS\Parser.fsy"
                 : 'atom));
# 302 "C:\Users\Wael\Projects\SchizoFS\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Node)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "C:\Users\Wael\Projects\SchizoFS\Parser.fsy"
                                                                   _1 
                   )
# 58 "C:\Users\Wael\Projects\SchizoFS\Parser.fsy"
                 : 'atom));
# 313 "C:\Users\Wael\Projects\SchizoFS\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Node)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "C:\Users\Wael\Projects\SchizoFS\Parser.fsy"
                                                                   _1 
                   )
# 59 "C:\Users\Wael\Projects\SchizoFS\Parser.fsy"
                 : 'atom));
# 324 "C:\Users\Wael\Projects\SchizoFS\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'paren_exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "C:\Users\Wael\Projects\SchizoFS\Parser.fsy"
                                                                   _1 
                   )
# 62 "C:\Users\Wael\Projects\SchizoFS\Parser.fsy"
                 : 'exp));
# 335 "C:\Users\Wael\Projects\SchizoFS\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'atom)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "C:\Users\Wael\Projects\SchizoFS\Parser.fsy"
                                                                   _1 
                   )
# 65 "C:\Users\Wael\Projects\SchizoFS\Parser.fsy"
                 : 'exp_member));
# 346 "C:\Users\Wael\Projects\SchizoFS\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "C:\Users\Wael\Projects\SchizoFS\Parser.fsy"
                                                                   _1 
                   )
# 66 "C:\Users\Wael\Projects\SchizoFS\Parser.fsy"
                 : 'exp_member));
# 357 "C:\Users\Wael\Projects\SchizoFS\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp_member)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "C:\Users\Wael\Projects\SchizoFS\Parser.fsy"
                                                                   [ _1 ] 
                   )
# 69 "C:\Users\Wael\Projects\SchizoFS\Parser.fsy"
                 : 'exp_member_list));
# 368 "C:\Users\Wael\Projects\SchizoFS\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp_member_list)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp_member)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "C:\Users\Wael\Projects\SchizoFS\Parser.fsy"
                                                                   _2 :: _1 
                   )
# 70 "C:\Users\Wael\Projects\SchizoFS\Parser.fsy"
                 : 'exp_member_list));
# 380 "C:\Users\Wael\Projects\SchizoFS\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "C:\Users\Wael\Projects\SchizoFS\Parser.fsy"
                                                                   [] 
                   )
# 73 "C:\Users\Wael\Projects\SchizoFS\Parser.fsy"
                 : 'exp_list));
# 390 "C:\Users\Wael\Projects\SchizoFS\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp_member_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "C:\Users\Wael\Projects\SchizoFS\Parser.fsy"
                                                                   _1 
                   )
# 74 "C:\Users\Wael\Projects\SchizoFS\Parser.fsy"
                 : 'exp_list));
# 401 "C:\Users\Wael\Projects\SchizoFS\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : TokenData)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "C:\Users\Wael\Projects\SchizoFS\Parser.fsy"
                                                                   raise (Exception (sprintf "SyntaxError: Unmatched '(' @ Line: %d Column: %d" (_1.LineNumber + 1) (_1.Column + 1))) 
                   )
# 77 "C:\Users\Wael\Projects\SchizoFS\Parser.fsy"
                 : 'paren_exp));
# 413 "C:\Users\Wael\Projects\SchizoFS\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : TokenData)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp_list)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : TokenData)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "C:\Users\Wael\Projects\SchizoFS\Parser.fsy"
                                                                   ListNode ((List.rev _2), _1) 
                   )
# 78 "C:\Users\Wael\Projects\SchizoFS\Parser.fsy"
                 : 'paren_exp));
|]
# 427 "C:\Users\Wael\Projects\SchizoFS\Parser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 20;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : Node option =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
